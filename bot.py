import json
import os
import logging
import random
from datetime import datetime
import pytz
import asyncio
import requests
import re
import base64

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
BOT_TOKEN = "8270366283:AAHxjn64fkdB9xXDIkVwe7h2iiJST5aBemU"
MISTRAL_API_KEY = "bfDtPtgSLxjZZSsEnox8vv0Z094YacXO"

DB_PATH = "llbot.json"
DAILY_REMINDER_HOUR = 16  # –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å
DAILY_REMINDER_MINUTE = 23
TIMEZONE = "Europe/Kiev"

# --- –õ–æ–≥—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logging.getLogger("aiogram").setLevel(logging.ERROR)

# --- –ë–æ—Ç ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

quiz_states = {}

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è JSON –±–∞–∑–∏ ---
def load_db():
    if not os.path.exists(DB_PATH) or os.path.getsize(DB_PATH) == 0:
        return {"users": {}, "words": {}}
    with open(DB_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_to_github():
    """
    –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ GITHUB_TOKEN —ñ REPO_NAME, –∑–∞–ª–∏–≤–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π JSON —É GitHub.
    """
    token = os.getenv("GITHUB_TOKEN")
    repo = os.getenv("GITHUB_REPO", "Polilen/tgbot")
    file_path = DB_PATH

    if not token:
        logger.warning("‚ö†Ô∏è GITHUB_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è GitHub.")
        return

    with open(file_path, "r", encoding="utf-8") as f:
        content = f.read()

    url = f"https://api.github.com/repos/{repo}/contents/{file_path}"
    headers = {"Authorization": f"token {token}"}

    # –û—Ç—Ä–∏–º—É—î–º–æ SHA –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É (—è–∫—â–æ —ñ—Å–Ω—É—î)
    r = requests.get(url, headers=headers)
    sha = r.json().get("sha") if r.status_code == 200 else None

    # –ö–æ–¥—É—î–º–æ —Ñ–∞–π–ª —É Base64 ‚Äî GitHub —Ü—å–æ–≥–æ –≤–∏–º–∞–≥–∞—î
    encoded_content = base64.b64encode(content.encode("utf-8")).decode("utf-8")

    data = {
        "message": "update JSON",
        "content": encoded_content,
        "sha": sha
    }

    response = requests.put(url, headers=headers, json=data)
    if response.status_code not in (200, 201):
        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ JSON —É GitHub: {response.text}")
    else:
        logger.info("‚úÖ JSON —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —É GitHub.")


def save_db(db):
    with open(DB_PATH, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)
    save_to_github()

def ensure_user(user_id: int, language: str = None):
    db = load_db()
    uid = str(user_id)
    if uid not in db["users"]:
        db["users"][uid] = {
            "language": language or "",
            "quiz_score": 0,
            "words_learned": 0,
            "last_activity": datetime.utcnow().isoformat()
        }
    else:
        if language:
            db["users"][uid]["language"] = language
        db["users"][uid]["last_activity"] = datetime.utcnow().isoformat()
    save_db(db)

def add_word_to_db(user_id: int, word: str, translation: str):
    db = load_db()
    uid = str(user_id)
    if uid not in db["words"]:
        db["words"][uid] = []
    db["words"][uid].append({
        "word": word.strip(),
        "translation": translation.strip(),
        "known": False,
        "added_at": datetime.utcnow().isoformat()
    })
    save_db(db)

def clean_word_text(text: str):
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–∫–∏ –≤–∏–¥—É 'Dolphin** ‚Äî –î–µ–ª—å—Ñ—ñ–Ω' —É 'Dolphin ‚Äî –î–µ–ª—å—Ñ—ñ–Ω'.
    –Ü–≥–Ω–æ—Ä—É—î –±—É–¥—å-—è–∫—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ AI –ø—ñ—Å–ª—è —Å–ª–æ–≤–∞.
    """
    if '‚Äî' not in text:
        return None, None
    eng, ukr = text.split('‚Äî', 1)
    # –í–∏–¥–∞–ª—è—î–º–æ *, —Ü–∏—Ñ—Ä–∏, —Ç–æ—á–∫–∏, –¥—É–∂–∫–∏, –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    eng = re.sub(r'[\*\d\.\(\[].*?[\)\]]|[\*\d\.]+', '', eng).strip()
    ukr = re.sub(r'[\*\d\.]+', '', ukr).strip()
    return eng, ukr

def get_user_words(user_id: int):
    db = load_db()
    return db["words"].get(str(user_id), [])

def mark_word_known(user_id: int, word_index: int):
    db = load_db()
    uid = str(user_id)
    if uid in db["words"] and 0 <= word_index < len(db["words"][uid]):
        db["words"][uid][word_index]["known"] = True
        save_db(db)

def increment_quiz_score(user_id: int, score: int):
    db = load_db()
    uid = str(user_id)
    if uid in db["users"]:
        db["users"][uid]["quiz_score"] += score
        save_db(db)

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó Mistral AI ---
def mistral_translate(word: str) -> str:
    """
    –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Mistral AI.
    """
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "mistral-small-latest",
        "messages": [
            {"role": "system", "content": "–¢–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á. –ü–µ—Ä–µ–∫–ª–∞–¥–∞–π –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ª–∏—à–µ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."},
            {"role": "user", "content": f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Å–ª–æ–≤–æ '{word}' —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."}
        ]
    }

    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 200:
        result = response.json()
        return result["choices"][0]["message"]["content"].strip()
    else:
        logger.error(f"Mistral API error: {response.text}")
        return None

def mistral_generate_topic_words(topic: str, n: int = 5) -> dict:
    """
    –ì–µ–Ω–µ—Ä—É—î n —Å–ª—ñ–≤ –ø–æ —Ç–µ–º—ñ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ {–∞–Ω–≥–ª: —É–∫—Ä}.
    """
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    prompt = (
        f"–°—Ñ–æ—Ä–º—É–π {n} –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –ø–æ —Ç–µ–º—ñ '{topic}' —ñ –¥–∞–π –ø–µ—Ä–µ–∫–ª–∞–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –≤ —Ñ–æ—Ä–º–∞—Ç—ñ "
        f"'word ‚Äî –ø–µ—Ä–µ–∫–ª–∞–¥', –ª–∏—à–µ —Å–ª–æ–≤–∞, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å."
    )
    data = {
        "model": "mistral-small-latest",
        "messages": [
            {"role": "system", "content": "–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤."},
            {"role": "user", "content": prompt}
        ]
    }

    response = requests.post(url, headers=headers, json=data)
    words_dict = {}
    if response.status_code == 200:
        result = response.json()
        text = result["choices"][0]["message"]["content"].strip()
        for line in text.split("\n"):
            if "‚Äî" in line:
                eng, ukr = line.split("‚Äî", 1)
                words_dict[eng.strip()] = ukr.strip()
    else:
        logger.error(f"Mistral API error: {response.text}")
    return words_dict


@dp.message_handler(lambda msg: msg.text in ["/help", "/quiz", "/start"])
async def handle_buttons(message: types.Message):
    if message.text == "/help":
        await cmd_help(message)
    elif message.text == "/quiz":
        await cmd_quiz(message)
    elif message.text == "/start":
        await cmd_start(message)
# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    help_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start ‚Äî –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\n"
        "/addword —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–∫–ª–∞–¥ ‚Äî –¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ\n"
        "/translate —Å–ª–æ–≤–æ ‚Äî –¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º\n"
        "/aiword —á–∏—Å–ª–æ ‚Äî –¥–æ–¥–∞—Ç–∏ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —á–µ—Ä–µ–∑ AI\n"
        "/aitopic —Ç–µ–º–∞ —á–∏—Å–ª–æ ‚Äî –¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º—ñ —á–µ—Ä–µ–∑ AI (–¥–æ 10)\n"
        "/mywords ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–≤–æ—ó —Å–ª–æ–≤–∞\n"
        "/quiz ‚Äî –ø–æ—á–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É\n"
        "/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/editword –Ω–æ–º–µ—Ä —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–∫–ª–∞–¥ ‚Äî —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ª–æ–≤–æ\n"
        "/deleteword –Ω–æ–º–µ—Ä ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–æ–≤–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º\n"
        "/clearwords ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞\n"
    )
    await message.answer(help_text, parse_mode="Markdown")

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    language = "English"
    ensure_user(message.from_user.id, language)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        KeyboardButton("/help"),
        KeyboardButton("/quiz"),
        KeyboardButton("/start")
    )
    
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.\n\n"
        "–ú–æ–∂–µ—à —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∞–±–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É:\n"
        "/addword —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–∫–ª–∞–¥ ‚Äî –¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ\n"
        "/translate —Å–ª–æ–≤–æ ‚Äî –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ —á–µ—Ä–µ–∑ AI\n"
        "/aiword —á–∏—Å–ª–æ ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ AI\n"
        "/aitopic —Ç–µ–º–∞ —á–∏—Å–ª–æ ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º—ñ\n"
        "/mywords ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó —Å–ª–æ–≤–∞\n"
        "/quiz ‚Äî –ø–æ—á–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É\n\n"
        "–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —É—Å—ñ –∫–æ–º–∞–Ω–¥–∏, –≤–≤–µ–¥–∏ /help.",
        reply_markup=kb
    )
@dp.message_handler(commands=['addword'])
async def cmd_addword(message: types.Message):
    args = message.get_args()
    if not args:
        await message.answer("–í–≤–µ–¥–∏ —Å–ª–æ–≤–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n/addword cat - –∫—ñ—Ç\ndog - —Å–æ–±–∞–∫–∞")
        return
    lines = [l.strip() for l in args.split("\n") if l.strip()]
    added = []
    for line in lines:
        if '-' in line:
            parts = line.split('-', 1)
            word, translation = parts[0].strip(), parts[1].strip()
            if word and translation:
                add_word_to_db(message.from_user.id, word, translation)
                added.append(f"{word} ‚Äî {translation}")
    if added:
        await message.answer("‚úÖ –î–æ–¥–∞–Ω—ñ —Å–ª–æ–≤–∞:\n" + "\n".join(added))
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Å–ª–æ–≤–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç 'word - translation'.")

# --- AI word generators ---
def mistral_generate_unique_words(existing_words: set, count: int = 1) -> dict:
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {"Authorization": f"Bearer {MISTRAL_API_KEY}", "Content-Type": "application/json"}
    existing_str = ", ".join(existing_words) if existing_words else "–Ω–µ–º–∞—î —Å–ª—ñ–≤"
    prompt = f"–ó–≥–µ–Ω–µ—Ä—É–π {count} –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ '–∞–Ω–≥–ª ‚Äî —É–∫—Ä', –Ω–µ –≤–∫–ª—é—á–∞—é—á–∏ —Ü—ñ —Å–ª–æ–≤–∞: {existing_str}. –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–∞—î –±—É—Ç–∏ –Ω–æ–≤–∏–º —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º."
    data = {"model": "mistral-small-latest", "messages": [{"role": "system", "content": "–¢–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á —ñ –≤—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏."}, {"role": "user", "content": prompt}]}

    response = requests.post(url, headers=headers, json=data)
    result = {}
    if response.status_code == 200:
        resp_json = response.json()
        content = resp_json["choices"][0]["message"]["content"].strip()
        lines = [l.strip() for l in content.split("\n") if l.strip()]
        for line in lines:
            if '‚Äî' in line:
                eng, ukr = line.split('‚Äî', 1)
                eng, ukr = eng.strip(), ukr.strip()
                if eng not in existing_words:
                    result[eng] = ukr
    else:
        logger.error(f"Mistral API error: {response.text}")

    return result

@dp.message_handler(commands=["translate"])
async def cmd_translate(message: types.Message):
    args = message.get_args().strip()
    if not args:
        await message.answer("–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É. –ü—Ä–∏–∫–ª–∞–¥:\n/translate dog")
        return

    word = args
    await message.answer(f"‚è≥ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—é —Å–ª–æ–≤–æ '{word}'...")
    translation = mistral_translate(word)
    if translation:
        eng, ukr = clean_word_text(f"{word} ‚Äî {translation}")
        add_word_to_db(message.from_user.id, eng, ukr)
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ: {eng} ‚Äî {ukr}")
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Å–ª–æ–≤–æ.")

@dp.message_handler(commands=["aiword"])
async def cmd_aiword(message: types.Message):
    args = message.get_args().strip()
    
    if not args.isdigit():
        await message.answer("–í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –ü—Ä–∏–∫–ª–∞–¥: /aiword 5")
        return
    
    count = int(args)
    count = min(count, 10)  # –º–∞–∫—Å–∏–º—É–º 10 —Å–ª—ñ–≤

    existing_words = {w['word'] for w in get_user_words(message.from_user.id)}
    await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä—É—é {count} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤ —á–µ—Ä–µ–∑ Mistral AI...")

    words_dict = mistral_generate_unique_words(existing_words, count)
    added = {}

    if words_dict:
        for eng_raw, ukr_raw in words_dict.items():
            eng, ukr = clean_word_text(f"{eng_raw} ‚Äî {ukr_raw}")
            if eng and ukr and eng not in existing_words:
                add_word_to_db(message.from_user.id, eng, ukr)
                existing_words.add(eng)
                added[eng] = ukr

        added_words_text = "\n".join([f"{e} ‚Äî {u}" for e, u in added.items()])
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω—ñ —Å–ª–æ–≤–∞:\n{added_words_text}")
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞.")


@dp.message_handler(commands=["aitopic"])
async def cmd_aitopic(message: types.Message):
    args = message.get_args().strip()
    if not args:
        topic = random.choice(["food","animals","colors","house","school","nature"])
        count = 5
    else:
        parts = args.split()
        topic = parts[0]
        count = int(parts[1]) if len(parts) > 1 else 5
        count = min(count, 10)

    existing_words = {w['word'] for w in get_user_words(message.from_user.id)}
    await message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä—É—é –¥–æ {count} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å–ª—ñ–≤ –∑–∞ —Ç–µ–º–æ—é '{topic}' —á–µ—Ä–µ–∑ Mistral AI...")

    prompt_words = ", ".join(existing_words) if existing_words else "–Ω–µ–º–∞—î —Å–ª—ñ–≤"
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }
    prompt = (
        f"–ó–≥–µ–Ω–µ—Ä—É–π {count} –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤ –∑–∞ —Ç–µ–º–æ—é '{topic}' –∑ –ø–µ—Ä–µ–∫–ª–∞–¥–æ–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —É —Ñ–æ—Ä–º–∞—Ç—ñ '–∞–Ω–≥–ª ‚Äî —É–∫—Ä', "
        f"–Ω–µ –≤–∫–ª—é—á–∞—é—á–∏ —Ü—ñ —Å–ª–æ–≤–∞: {prompt_words}. –ö–æ–∂–Ω–µ —Å–ª–æ–≤–æ –º–∞—î –±—É—Ç–∏ –Ω–æ–≤–∏–º —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º. "
        f"–ù–µ –¥–æ–¥–∞–≤–∞–π –±—É–¥—å-—è–∫—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ —á–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å–ª—ñ–≤."
    )
    data = {
        "model": "mistral-small-latest",
        "messages": [
            {"role": "system", "content": "–¢–∏ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—á —ñ –≤—á–∏—Ç–µ–ª—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏."},
            {"role": "user", "content": prompt}
        ]
    }

    response = requests.post(url, headers=headers, json=data)
    added = {}
    if response.status_code == 200:
        resp_json = response.json()
        content = resp_json["choices"][0]["message"]["content"].strip()
        lines = [l.strip() for l in content.split("\n") if l.strip()]
        for line in lines:
            eng, ukr = clean_word_text(line)
            if eng and ukr and eng not in existing_words:
                add_word_to_db(message.from_user.id, eng, ukr)
                existing_words.add(eng)
                added[eng] = ukr

    if added:
        await message.answer("‚úÖ –î–æ–¥–∞–Ω—ñ —Å–ª–æ–≤–∞:\n" + "\n".join([f"{e} ‚Äî {u}" for e, u in added.items()]))
    else:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ –∑–∞ —Ü—ñ—î—é —Ç–µ–º–æ—é.")

# --- MyWords, Stats, Quiz –æ–±—Ä–æ–±–Ω–∏–∫–∏ ---
@dp.message_handler(commands=["mywords"])
async def cmd_mywords(message: types.Message):
    words = get_user_words(message.from_user.id)
    if not words:
        await message.answer("–°–ª–æ–≤–Ω–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    lines = [f"{i+1}. {w['word']} ‚Äî {w['translation']} {'‚úÖ' if w['known'] else '‚ùå'}" for i, w in enumerate(words)]
    await message.answer("\n".join(lines))

@dp.message_handler(commands=["stats"])
async def cmd_stats(message: types.Message):
    db = load_db()
    uid = str(message.from_user.id)
    user = db["users"].get(uid)
    if not user:
        await message.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return
    words = get_user_words(message.from_user.id)
    known = sum(1 for w in words if w["known"])
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—Å—å–æ–≥–æ —Å–ª—ñ–≤: {len(words)}\n–í–∏–≤—á–µ–Ω–æ: {known}\n–û—á–∫–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏: {user['quiz_score']}"
    )

@dp.message_handler(commands=['delword'])
async def cmd_delword(message: types.Message):
    args = message.get_args().strip()
    if not args.isdigit():
        await message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è. –ü—Ä–∏–∫–ª–∞–¥: /delword 3")
        return
    idx = int(args) - 1
    words = get_user_words(message.from_user.id)
    if 0 <= idx < len(words):
        removed = words.pop(idx)
        db = load_db()
        db["words"][str(message.from_user.id)] = words
        save_db(db)
        await message.answer(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Å–ª–æ–≤–æ: {removed['word']} ‚Äî {removed['translation']}")
    else:
        await message.answer("‚ùå –°–ª–æ–≤–æ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(commands=['editword'])
async def cmd_editword(message: types.Message):
    args = message.get_args().strip()
    if not args:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ñ–æ—Ä–º–∞—Ç: /editword <–Ω–æ–º–µ—Ä> –Ω–æ–≤–µ_—Å–ª–æ–≤–æ - –Ω–æ–≤–∏–π_–ø–µ—Ä–µ–∫–ª–∞–¥")
        return
    parts = args.split(maxsplit=1)
    if len(parts) < 2 or '-' not in parts[1]:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: /editword 2 cat - –∫—ñ—Ç")
        return
    idx = int(parts[0]) - 1
    new_word, new_trans = [p.strip() for p in parts[1].split('-', 1)]
    words = get_user_words(message.from_user.id)
    if 0 <= idx < len(words):
        words[idx]["word"] = new_word
        words[idx]["translation"] = new_trans
        db = load_db()
        db["words"][str(message.from_user.id)] = words
        save_db(db)
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_word} ‚Äî {new_trans}")
    else:
        await message.answer("‚ùå –°–ª–æ–≤–æ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.message_handler(commands=['clearwords'])
async def cmd_clearwords(message: types.Message):
    db = load_db()
    db["words"][str(message.from_user.id)] = []
    save_db(db)
    await message.answer("‚úÖ –í—Å—ñ —Å–ª–æ–≤–∞ –≤–∏–¥–∞–ª–µ–Ω—ñ.")

@dp.message_handler(commands=["quiz"])
async def cmd_quiz(message: types.Message):
    words = get_user_words(message.from_user.id)
    if not words:
        await message.answer("–°–ª—ñ–≤ –Ω–µ–º–∞—î. –î–æ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ /addword")
        return
    questions = []
    all_trans = [w["translation"] for w in words]
    for i, w in enumerate(random.sample(words, min(5, len(words)))):
        wrongs = [t for t in all_trans if t != w["translation"]]
        options = [w["translation"]] + random.sample(wrongs, min(3, len(wrongs)))
        random.shuffle(options)
        questions.append({"index": i, "word": w["word"], "correct": w["translation"], "options": options})
    quiz_states[message.from_user.id] = {"questions": questions, "current": 0, "score": 0}
    await send_quiz_question(message.from_user.id)

async def send_quiz_question(user_id: int):
    state = quiz_states.get(user_id)
    if not state:
        return
    if state["current"] >= len(state["questions"]):
        increment_quiz_score(user_id, state["score"])
        await bot.send_message(user_id, f"–í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {state['score']}/{len(state['questions'])}")
        quiz_states.pop(user_id)
        return
    q = state["questions"][state["current"]]
    kb = InlineKeyboardMarkup()
    for i, opt in enumerate(q["options"]):
        kb.add(InlineKeyboardButton(opt, callback_data=f"quiz|{state['current']}|{i}"))
    await bot.send_message(user_id, f"{q['word']} ‚Äî –æ–±–µ—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("quiz|"))
async def handle_quiz(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    state = quiz_states.get(user_id)
    if not state:
        return
    parts = callback.data.split("|")
    q_index, opt_index = int(parts[1]), int(parts[2])
    q = state["questions"][q_index]
    selected = q["options"][opt_index]
    words = get_user_words(user_id)
    word_idx = next((i for i, w in enumerate(words) if w["word"] == q["word"]), None)
    if selected == q["correct"]:
        state["score"] += 1
        if word_idx is not None:
            mark_word_known(user_id, word_idx)
        await bot.send_message(user_id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {q['word']} ‚Üí {q['correct']}")
    else:
        await bot.send_message(user_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. {q['word']} ‚Üí {q['correct']}")
    state["current"] += 1
    await send_quiz_question(user_id)

# --- –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ ---
scheduler = AsyncIOScheduler(timezone=TIMEZONE)

async def send_daily_words_async():
    db = load_db()
    for uid, words in db["words"].items():
        if not words:
            continue
        sample = random.sample(words, min(3, len(words)))
        lines = ["üìÖ –ß–∞—Å –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ª–æ–≤–∞!"]
        for w in sample:
            lines.append(f"{w['word']} ‚Äî {w['translation']}")
        await bot.send_message(int(uid), "\n".join(lines))

def start_scheduler():
    scheduler.add_job(send_daily_words_async, CronTrigger(hour=DAILY_REMINDER_HOUR, minute=DAILY_REMINDER_MINUTE))
    logger.info("–ó–∞–≤–¥–∞–Ω–Ω—è –Ω–∞ —â–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ")

# --- –°—Ç–∞—Ä—Ç ---
async def on_startup(dp):
    start_scheduler()
    scheduler.start()
    logger.info("Scheduler –∑–∞–ø—É—â–µ–Ω–æ")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
